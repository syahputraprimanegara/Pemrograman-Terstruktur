#include <iostream>
#include <cstring>
using namespace std;
int main(){

	int ck;
	int save=0;
	int ada=0;
	int jml;

	char data[100];
	char word[15][15] =	{{'t','g','b','w','w','i','n','t','e','r','w','s','e','s','n'},
						{'a','a','u','n','t','t','m','m','h','f','o','o','d','n','b'},
						{'j','l','w','c','q','l','d','z','m','p','m','v','d','m','r'},
						{'a','s','a','g','m','q','u','w','v','v','b','s','o','h','i'},
						{'b','w','p','l','o','t','a','n','a','d','t','p','g','n','c'},
						{'r','e','w','n','g','o','d','j','c','p','n','a','t','n','k'},
						{'e','e','o','t','w','o','s','b','q','h','a','r','r','s','a'},
						{'a','z','c','g','e','s','w','e','w','n','a','k','n','p','b'},
						{'d','i','n','n','e','r','q','o','d','l','w','d','c','a','r'},
						{'o','n','o','p','k','w','m','p','a','r','k','t','z','c','c'},
						{'q','b','f','r','o','g','m','a','m','w','p','w','e','e','y'},
						{'l','q','z','q','n','n','m','r','z','j','j','s','c','l','g'},
						{'m','o','s','g','z','c','z','d','t','d','b','o','o','t','o'},
						{'p','d','c','r','z','m','s','n','g','r','d','n','r','p','z'},
						{'o','h','n','k','z','w','a','t','e','r','j','g','t','r','a'}};

				cout<<endl<<endl;


	for (int b=0; b<=14; b++){
		for (int k=0; k<=14; k++){
			cout<<" | "<<word[b][k];
		}
		cout<<endl;
	}
		
		char tekan;
		label:
		cout<<endl<<" Masukkan jumlah kata yang akan anda cari dari tabel = ";
		cin>>jml;
		
		for(int x=1;x<=jml;x++){
			cout<<" Kata "<<x<<" yang akan dicari : "; cin>>data;
			ck = strlen(data);								// banyak karakter yang dicari
					
		cout<<endl;
		
		for (int b=0; b<15; b++){							// baris
			for (int k=0; k<15; k++){						// kolom
				if (data[0] == word[b][k]){
					
					// KANAN   KANAN   KANAN   KANAN   KANAN   KANAN   KANAN   KANAN   KANAN   KANAN   KANAN    
					for (int p=0; p<ck; p++){
						if (data[p] == word[b][k+p]){		// rumus chek ke kanan
						save=p;
						}
						else{
							break;
						}
					}
					if (save == ck-1){
						ada +=1;
					}
					else{
						ada +=0;
					}
					
					// KIRI    KIRI    KIRI    KIRI    KIRI    KIRI    KIRI    KIRI    KIRI    KIRI    KIRI      
					for (int p=0; p<ck; p++){
						if (data[p] == word[b][k-p]){		// rumus chek ke kiri
							save=p;
						}
						else{
							break;
						}
					}
					if (save == ck-1){
						ada +=1;
					}
					else{
						ada +=0;
					}
					
					// ATAS    ATAS    ATAS    ATAS    ATAS    ATAS    ATAS    ATAS    ATAS    ATAS    ATAS     
					for (int p=0; p<ck; p++){
						if (data[p] == word[b-p][k]){			// rumus chek ke atas
							save=p;
						}
						else{
							break;
						}
					}
					if (save == ck-1){
						ada +=1;
					}
					else{
						ada +=0;
					}
					
					// BAWAH   BAWAH   BAWAH   BAWAH   BAWAH   BAWAH   BAWAH   BAWAH   BAWAH   BAWAH   BAWAH
					for (int p=0; p<ck; p++){
						if (data[p] == word[b+p][k]){			// rumus chek ke bawah
							save=p;
						}
						else{
							break;
						}
					}
					if (save == ck-1){
						ada +=1;
					}
					else{
						ada +=0;
					}
					
					// DIAGONAL KANAN ATAS   DIAGONAL KANAN ATAS   DIAGONAL KANAN ATAS   DIAGONAL KANAN ATAS  
					for (int p=0; p<ck; p++){
						if (data[p] == word[b-p][k+p]){			// rumus chek ke Diagonal Kanan Atas
							save=p;
						}
						else{
							break;
						}
					}
					if (save == ck-1){
						ada +=1;
					}
					else{
						ada +=0;
					}
						
					// DIAGONAL KIRI ATAS   DIAGONAL KIRI ATAS   DIAGONAL KIRI ATAS   DIAGONAL KIRI ATAS 
					for (int p=0; p<ck; p++){
						if (data[p] == word[b-p][k-p]){			// rumus chek ke Diagonal Kiri Atas
							save=p;
						}
						else{
							break;
						}
					}
					if (save == ck-1){
						ada +=1;
					}
					else{
						ada +=0;
					}
				
					// DIAGONAL KANAN BAWAH   DIAGONAL KANAN BAWAH   DIAGONAL KANAN BAWAH   
					for (int p=0; p<ck; p++){
						if (data[p] == word[b+p][k+p]){			// rumus chek ke Diagonal Kanan Bawah
							save=p;
						}
						else{
							break;
						}
					}
					if (save == ck-1){
						ada +=1;
					}
					else{
						ada +=0;
					}
					
					// DIAGONAL KIRI BAWAH   DIAGONAL KIRI BAWAH   DIAGONAL KIRI BAWAH   DIAGONAL KIRI BAWAH   
					for (int p=0; p<ck; p++){
						if (data[p] == word[b+p][k-p]){			// rumus chek ke Diagonal Kiri Bawah
							save=p;
						}
						else{
							break;
						}
					}
					if (save == ck-1){
						ada +=1;
					}
					else{
						ada +=0;
					}
				}
			}
		}	
	
					if(ada>0){
						cout<<" ADA "<<endl<<endl; 
					}
						else{
							cout<<" TIDAK ADA "<<endl<<endl;
						}
	}
